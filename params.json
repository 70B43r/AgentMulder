{"note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Agent Mulder plugin for ReSharper","tagline":"Agent Mulder plugin for ReSharper provides navigation to and finding usages of types registered or resolved via Dependency Injection (DI) containers.","google":"UA-31927867-1","body":"![Agent Mulder](http://i.imgur.com/7ZNxO.png)\r\n\r\n**Agent Mulder** plugin for ReSharper analyzes DI containers (Dependency Injection, sometimes called Inversion of Control, or IoC containers) in your solution, and provides navigation to and finding usages of types registered or resolved via DI containers.\r\n\r\n## Download Agent Mulder v1.0.0 Beta [here](https://github.com/downloads/hmemcpy/AgentMulder/AgentMulderBeta1.0.0.0.msi)!\r\n\r\n###Check out a short demonstration video here: http://vimeo.com/41113265 ###\r\n(GitHub does not allow embedding videos in the README page)\r\n\r\n## The Problem ##\r\n\r\nWith all the major benefits of using smart DI containers to wire up dependencies in code, it breaks automatic code-analysis tools like ReSharper, because DI containers will only create concrete types at run-time (typically using Reflection), and this information is not known during static code analysis.\r\n\r\nConsider the following example with [Castle Windsor](http://www.castleproject.org/container/index.html):\r\n\r\n```csharp\r\nvar container = new WindsorContainer();\r\ncontainer.Register(\r\n    Component.For<IMessageWriter>().ImplementedBy<ConsoleMessageWriter>()\r\n    );\r\n    \r\nvar messageWriter = container.Resolve<IMessageWriter>();\r\n```    \r\n\r\nUsing the configuration above, at runtime the container will resolve the concrete `ConsoleMessageWriter`, however, if you're using ReSharper with solution-wide analysis enabled, it will tell you that `ConsoleMessageWriter` is never instantiated:\r\n\r\n![Never instantiated](http://i.imgur.com/YNWby.png)\r\n\r\nThis gets worse in convention-based registrations, such as:\r\n\r\n```csharp\r\ncontainer.Register(\r\n    Classes.FromThisAssembly().BasedOn<IMessageWriter>()\r\n    );\r\n```\r\n\r\nWhere ReSharper will not even know that this type is being used:\r\n\r\n![Never used](http://i.imgur.com/pSezv.png)\r\n\r\n**Agent Mulder** aims to solve that problem!\r\n\r\n## The Solution ##\r\n\r\nAgent Mulder plugin for ReSharper analyzes known DI container registrations in the entire solution, and adds the missing information to ReSharper, so it no longer flags concrete types as being unused. It even adds an visual icon (![Black Magic Hat](http://i.imgur.com/QOZr1.png)) to the type name, allowing you to navigate to the exact line, where the concrete type is being implicitly or explicitly registered:\r\n\r\n![Agent Mulder](http://i.imgur.com/xjYrT.png)\r\n\r\nAgent Mulder plugin also adds a new navigation feature, allowing you to navigate to all the types that are being registered via any particular registration. Simply position the caret on the registration expression, and press the **Navigate To** keyboard shortcut (**Ctrl-Shift-G** in IntelliJ IDEA bindings, **Alt-`** in Visual Studio bindings):\r\n\r\n![Navigate To](http://i.imgur.com/y7PFp.png)\r\n\r\nSelect **Registered Components**, and you will be presented with a list of types matching that registration:\r\n\r\n![Results](http://i.imgur.com/XHjKZ.png)\r\n\r\nPressing **+** on the numeric keypad (or clicking the little search icon in the caption) will open the results in a tool window:\r\n\r\n![Tool window](http://i.imgur.com/g6QV7.png)\r\n\r\n\r\n## Building and installing Agent Mulder plugin ##\r\n\r\nTo build the plugin you need to have the [ReSharper SDK](http://www.jetbrains.com/resharper/download/) (v6.1.x at the time of writing), installed on your machine. The project will add the references automatically.\r\n\r\nTo build the plugin, run the file `src\\build.cmd`. The files will be built and placed into the directories `output\\Debug` and `output\\Release`. In the directory will also be a batch file that copies the files into the ReSharper's plugin directory. You will need to restart Visual Studio to see the changes.\r\n\r\n## Frequently Asked Questions (last updated: May 18th, 2012)##\r\n\r\n**Q: Wow! How does it work?**\r\n\r\n**A:** Agent Mulder makes heavy use ReSharper's [Structural Search](http://www.jetbrains.com/resharper/webhelp/Navigation_and_Search__SSR__Searching_for_Code_with_Pattern.html) to look for registration patterns, such as `Component.For<$service$>()`. This makes searching very efficient and does not require any additional parsing. This also allows for adding new patterns easily, allowing adding support for additional DI containers.\r\n\r\nMore information is available in the [wiki page](https://github.com/hmemcpy/AgentMulder/wiki).\r\n\r\n**Q: What DI containers are currently supported?**\r\n\r\n**A:** The list of the currently supported DI containers and their syntax can be found on the [wiki page](https://github.com/hmemcpy/AgentMulder/wiki).\r\n\r\n**Q: What about X (Ninject/StructureMap/Unity)? Can you add support for it?**\r\n\r\n**A:** Great question! Suggest a feature on the [issue tracker](https://github.com/hmemcpy/AgentMulder/issues), or better yet, send me a pull request!\r\n\r\n**Q: Why the name Agent Mulder?**\r\n\r\n**A:** There already exist a few great plugins for ReSharper called Agent Smith, Agent Johnson and Agent Ralph. I decided to continue the tradition, and after some consideration I decided on Agent Mulder - *The IoC Investigator* :)\r\n\r\n**Q: I found a bug/Agent Mulder highlights the wrong type (or doesn't)/It doesn't work!**\r\n\r\n**A:** Great! [Let me know](https://github.com/hmemcpy/AgentMulder/issues) about it, and I will try to fix it! Please note that I don't know all DI containers and their rules - if you think a mistake in analysis has been made, please note what should be the desired outcome in the issue.\r\n\r\n**Q: What font did you use for the logo?**\r\n\r\n**A:** It is called simply \"The X-Files\" by SpideRaY, and is available to download [here](http://www.dafont.com/the-x-files.font).\r\n\r\nAlso please note that Agent Mulder plugin requires ReSharper 6.1 and only works in Visual Studio 2010. Other versions were not tested!\r\n\r\nHappy Investigating!"}